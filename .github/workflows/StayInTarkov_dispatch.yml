
name: Stay In Tarkov Build Dispatcher

on:
  workflow_dispatch:
    inputs:
      build:
        description: 'client | launcher| manager | server'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        configuration: [Release, Debug]

    steps:

      - name: Set Client
        if: ${{ github.event.inputs.build == 'client' }}
        run: |
          echo "BUILD=client" >> $GITHUB_ENV
          echo "BUILD_DOTNET=6.0.x" >> $GITHUB_ENV
          echo "SETREPO=stayintarkov/StayInTarkov.Client" >> $GITHUB_ENV
          echo "SOLUTION=StayInTarkov-Client" >> $GITHUB_ENV

      - name: Set Launcher
        if: ${{ github.event.inputs.build == 'launcher' }}
        run: |
          echo "BUILD=launcher" >> $GITHUB_ENV
          echo "BUILD_DOTNET=8.0.x" >> $GITHUB_ENV
          echo "SETREPO=stayintarkov/SIT.Launcher.Classic" >> $GITHUB_ENV
          echo "SOLUTION=SIT.Launcher" >> $GITHUB_ENV

      - name: Set Manager
        if: ${{ github.event.inputs.build == 'manager' }}
        run: |
          echo "BUILD=manager" >> $GITHUB_ENV
          echo "BUILD_DOTNET=7.0.x" >> $GITHUB_ENV
          echo "SETREPO=stayintarkov/SIT.Manager" >> $GITHUB_ENV
          echo "SOLUTION=SIT.Manager" >> $GITHUB_ENV

      - name: Set Server
        if: ${{ github.event.inputs.build == 'server' }}
        run: |
          echo "BUILD=server" >> $GITHUB_ENV
          echo "SETREPO=stayintarkov/SIT.Aki-Server-Mod" >> $GITHUB_ENV
          echo "SOLUTION=SPT-AKI-x-PREBUILT-with-SIT" >> $GITHUB_ENV

      - name: Setup dotnet
        if: ${{ env.BUILD_DOTNET != '' }} 
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.BUILD_DOTNET }}

      - name: Checkout Repository
        if: ${{ env.BUILD_DOTNET != '' }}
        uses: actions/checkout@v2
        with:
          repository: ${{ env.SETREPO }}
          path: ${{ env. SOLUTION }}_build

      - name: ${{ env.SHORT_SHA }} ${{ env.BUILD }}
        run: |
          echo "echo $SETREPO $BUILD_DOTNET"
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-6)
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV
          NOW=$(date +"%Y-%m-%d")
          echo "NOW=$NOW" >> $GITHUB_ENV
          mkdir out

      - name: Build and Test - client - dotnet
        if: ${{ env.BUILD_DOTNET != '' &&  env.BUILD == 'client'}} 
        run: |
          cd ${{ env. SOLUTION }}_build
          ls * -t
          dotnet restore
          dotnet build ${{ env. SOLUTION }}_build/Source/StayInTarkov.csproj --nologo --no-restore --self-contained true -r win-x64 /p:PublishSingleFile=true -c ${{ matrix.configuration }} -o ${{ github.workspace }}/out/${{ env. SOLUTION }}-${{ matrix.configuration }} /p:PlatformTarget=x64 /p:NoWarn=CS0649 /p:EnableWindowsTargeting=true
          dotnet test
          LAST_COMMIT=$(git rev-parse HEAD)
          echo ${LAST_COMMIT}

      - name: Build and Test - manager - dotnet
        if: ${{ env.BUILD_DOTNET != '' &&  env.BUILD != 'manager'}} 
        run: |
          cd ${{ env. SOLUTION }}_build
          ls * -t
          dotnet restore
          dotnet publish ${{ env. SOLUTION }}/${{env.SOLUTION}}.csproj --self-contained true -r win-x64 --nologo -c ${{ matrix.configuration }} -o ${{ github.workspace }}/out/${{ env. SOLUTION }}-${{ matrix.configuration }} /p:PlatformTarget=x64 /p:NoWarn=CS0649 /p:EnableWindowsTargeting=true /p:PublishSingleFile=true
          dotnet test
          LAST_COMMIT=$(git rev-parse HEAD)
          echo ${LAST_COMMIT}
          cd -
    
      - name: Build and Test - launcher - dotnet
        if: ${{ env.BUILD_DOTNET != '' &&  env.BUILD == 'launcher'}} 
        run: |
          cd ${{ env. SOLUTION }}_build
          ls * -t
          dotnet restore
          dotnet publish ${{env.SOLUTION}}/${{env.SOLUTION}}.csproj --self-contained true -r win-x64 --nologo -c ${{ matrix.configuration }} -o ${{ github.workspace }}/out/${{ env. SOLUTION }}-${{ matrix.configuration }} /p:PlatformTarget=x64 /p:NoWarn=CS0649 /p:EnableWindowsTargeting=true /p:PublishSingleFile=true
          dotnet test
          LAST_COMMIT=$(git rev-parse HEAD)
          echo ${LAST_COMMIT}
          cd -
  
      - name: Build package of ${{ env.BUILD }} - dotnet
        if: ${{ env.BUILD_DOTNET != '' }}
        run: |
          ls -t ${{ github.workspace }}/out/${{ env. SOLUTION }}-${{ matrix.configuration }}/* | grep -i -e Json -e pdb | xargs -n1 rm
          zip -jr ${{ github.workspace }}/out/${{ env. SOLUTION }}-${{ matrix.configuration }}.zip ${{ matrix.configuration }} -o ${{ github.workspace }}/out/${{ env. SOLUTION }}-${{ matrix.configuration }}

      # Upload artifact unless its merge to master
      - name: Upload builds to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.SOLUTION }}-${{ matrix.configuration }}-${{ env.SHORT_SHA }}
          path: ${{ github.workspace }}/out/${{ env. SOLUTION }}-${{ matrix.configuration }}.zip
          if-no-files-found: error

      - name: Build and Test - server
        if: ${{ env.BUILD == 'server' }} 
        run: |
          echo ${{ github.repository }}
          echo ${{ env.SETREPO }}
          LAST_COMMIT=$(git rev-parse HEAD)
          echo ${LAST_COMMIT}


      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          generate_release_notes: true
          tag_name: ${{ env.SOLUTION }}-${{ env.NOW }}-v1.${{ github.run_number }}
          files: |
            ${{ github.workspace }}/out/${{ env. SOLUTION }}-${{ matrix.configuration }}.zip